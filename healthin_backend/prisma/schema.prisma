generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  userId         String           @id @db.Uuid
  users          Users            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  adminUserRoles AdminUserRoles[]
}

model AdminUserRoles {
  roleId      String    @db.Uuid
  adminUserId String    @db.Uuid
  adminUser   AdminUser @relation(fields: [adminUserId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([roleId, adminUserId])
}

model City {
  id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String    @db.VarChar(100)
  uf      String    @db.Char(2)
  state   State     @relation(fields: [uf], references: [uf], onDelete: NoAction, onUpdate: NoAction)
  Address Address[]
}

model Illness {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String           @db.VarChar(255)
  cid            String           @db.VarChar(4)
  status         Boolean          @default(true)
  Pacienthistory Pacienthistory[]
}

model Laboratory {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String
  cnpj     String?    @db.Char(14)
  status   Boolean    @default(true)
  medicine Medicine[]
}

model Medicine {
  id              String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  activePrinciple String
  register        String     @db.VarChar(20)
  laboratoryId    String     @db.Uuid
  situation       Boolean    @default(true)
  expiration      DateTime?  @db.Timestamp(6)
  laboratory      Laboratory @relation(fields: [laboratoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String           @unique @db.VarChar(30)
  status         Boolean          @default(true)
  adminuserroles AdminUserRoles[]
}

model Specialization {
  id     String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   String  @unique @db.VarChar(40)
  status Boolean @default(true)
}

model State {
  uf   String @id @db.Char(2)
  name String @db.VarChar(40)
  city City[]
}

model Symptom {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description      String             @unique @db.VarChar(100)
  status           Boolean            @default(true)
  symptomOcorrence SymptomOcorrence[]
}

model Users {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String     @unique @db.VarChar(50)
  username  String     @unique @db.VarChar(30)
  password  String     @db.VarChar(50)
  createdat DateTime   @default(now()) @db.Timestamp(6)
  status    Boolean    @default(true)
  adminuser AdminUser?
  pacient   Pacient[]
}

enum Bloodtype {
  aNegative
  aPositive
  bNegative
  bPositive
  abNegative
  abPositive
  oNegative
  oPositive
}

enum Gender {
  masculine
  feminine
  notBinary
}

enum PaymentWay {
  pix
  creditCard
  debitCard
  money
}

enum BillStatus {
  open
  cancelled
  delayed
  paid
}

model Address {
  id           String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  street       String  @db.VarChar(50)
  number       String  @db.VarChar(6)
  neighborhood String  @db.VarChar(40)
  complement   String?
  reference    String?
  cityId       String  @db.Uuid
  city         City    @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Ocorrence {
  never
  rare
  sometimes
  common
  always
}

model SymptomOcorrence {
  id               String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ocorrence        Ocorrence
  description      String?
  symptomId        String          @db.Uuid
  symptom          Symptom         @relation(fields: [symptomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pacientHistory   Pacienthistory? @relation(fields: [pacientHistoryId], references: [id])
  pacientHistoryId String?         @db.Uuid
}

model Pacienthistory {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pacientId           String             @db.Uuid
  pacient             Pacient            @relation(fields: [pacientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  symptomsocorrences  SymptomOcorrence[]
  datetime            DateTime           @default(now()) @db.Timestamp(6)
  diagnosticIllnessId String?            @db.Uuid
  diagnosticIllness   Illness?           @relation(fields: [diagnosticIllnessId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Pacient {
  id             String           @id @db.Uuid
  user           Users            @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  firstname      String           @db.VarChar(40)
  lastname       String           @db.VarChar(60)
  cpf            String?          @db.Char(11)
  document       String?
  suscard        String?
  birthday       DateTime         @db.Date
  height         Int?
  weight         Float?
  bloodtype      Bloodtype
  pacienthistory Pacienthistory[]
}

//model Pretriage {
//}

//model Triage {
//}
