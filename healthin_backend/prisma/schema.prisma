generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model adminuser {
  userid         String           @id @db.Uuid
  users          users            @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  adminuserroles adminuserroles[]
}

model adminuserroles {
  roleid      String    @db.Uuid
  adminuserid String    @db.Uuid
  adminuser   adminuser @relation(fields: [adminuserid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  role        role      @relation(fields: [roleid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([roleid, adminuserid])
}

model city {
  id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String    @db.VarChar(100)
  stateuf String    @db.Char(2)
  state   state     @relation(fields: [stateuf], references: [uf], onDelete: NoAction, onUpdate: NoAction)
  Address Address[]
}

model laboratory {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String
  cnpj     String?    @db.Char(14)
  status   Boolean    @default(true)
  medicine medicine[]
}

model medicine {
  id              String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  activeprinciple String
  register        String     @db.VarChar(20)
  laboratoryid    String     @db.Uuid
  situation       Boolean    @default(true)
  expiration      DateTime?  @db.Timestamp(6)
  laboratory      laboratory @relation(fields: [laboratoryid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String           @unique @db.VarChar(30)
  status         Boolean          @default(true)
  adminuserroles adminuserroles[]
}

model specialization {
  id     String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   String  @unique @db.VarChar(40)
  status Boolean @default(true)
}

model state {
  uf   String @id @db.Char(2)
  name String @db.VarChar(40)
  city city[]
}

model symptom {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String  @unique @db.VarChar(100)
  status      Boolean @default(true)
}

model users {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String     @unique @db.VarChar(50)
  username  String     @unique @db.VarChar(30)
  password  String     @db.VarChar(50)
  createdat DateTime   @default(now()) @db.Timestamp(6)
  status    Boolean    @default(true)
  adminuser adminuser?
}

enum BloodType {
  aNegative
  aPositive
  bNegative
  bPositive
  abNegative
  abPositive
  oNegative
  oPositive
}

enum Gender {
  masculine
  feminine
  notBinary
}

enum PaymentWay {
  pix
  creditCard
  debitCard
  money
}

enum BillStatus {
  open
  cancelled
  delayed
  paid
}

model Address {
  id           String  @id @default(uuid())
  street       String  @db.VarChar(50)
  number       String  @db.VarChar(6)
  neighborhood String  @db.VarChar(40)
  complement   String?
  reference    String?
  cityId       String  @db.Uuid
  city         city    @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
